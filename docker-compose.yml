version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp_halisaha_bot
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-3000}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-gemini}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS:-3000}
      # OpenAI Configuration (if using LLM_PROVIDER=openai)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-3000}
      # Vertex AI / Gemini Configuration
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.0-flash}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-/app/.gcloud/service-account-key.json}
      # Vertex AI Authentication - choose one method:
      - GOOGLE_SERVICE_ACCOUNT_KEY_BASE64=${GOOGLE_SERVICE_ACCOUNT_KEY_BASE64}
      - GOOGLE_SERVICE_ACCOUNT_KEY_JSON=${GOOGLE_SERVICE_ACCOUNT_KEY_JSON}
      # Database and Redis
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-halisaha}
      - REDIS_URL=redis://redis:6379
    volumes:
      # Mount service account key file for Vertex AI authentication (optional - only if using file method)
      # Uncomment the line below if you're using Method 3 (file mount) instead of environment variables
      # - ${GOOGLE_APPLICATION_CREDENTIALS_HOST:-./service-account-key.json}:/app/.gcloud/service-account-key.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - halisaha_network

  postgres:
    image: postgres:16-alpine
    container_name: halisaha_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-halisaha}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - halisaha_network

  redis:
    image: redis:7-alpine
    container_name: halisaha_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - halisaha_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  halisaha_network:
    driver: bridge
